import { useEffect, useState, useRef } from "react";
import { useParams } from "react-router-dom";
import axios from "axios";
const CourseContent = () => {
  const { id } = useParams();
  const [targetAudience, setTargetAudience] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [newAudience, setNewAudience] = useState("");
  const [draggedIndex, setDraggedIndex] = useState(null);
  const [course, setCourse] = useState(null);
  const [selectedAudience, setSelectedAudience] = useState(null);
  const audienceContainerRef = useRef(null);
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (
        audienceContainerRef.current &&
        !audienceContainerRef.current.contains(e.target)
      ) {
        setSelectedAudience(null);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);
  useEffect(() => {
    const fetchCourse = async () => {
      try {
        const response = await fetch(
          `http://localhost:8080/api/instructor/courses/${id}`,
          {
            headers: {
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
          }
        );
        if (!response.ok) {
          throw new Error("Failed to fetch course details");
        }
        const data = await response.json();
        setCourse(data);
        setTargetAudience(data.courseContent || []);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchCourse();
  }, [id]);
  const handleSave = async (updatedAudience) => {
    const audienceToSave = updatedAudience || targetAudience;
    const instructorCoursesDetailDTO = {
      targetAudience: course.targetAudience,
      courseContent: audienceToSave,
      resourceDescription: course.resourceDescription,
      requirements: course.requirements,
    };

    try {
      await axios.put(
        `http://localhost:8080/api/instructor/update-course-detail/${course.courseId}`,
        instructorCoursesDetailDTO,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        }
      );
    } catch (err) {
      alert("Failed to update course: " + err.message);
    }
  };
  const handleAudienceChange = (index, value) => {
    const updated = [...targetAudience];
    updated[index] = value;
    setTargetAudience(updated);
    handleSave(updated);
  };
  const handleDelete = (index) => {
    const updated = targetAudience.filter((_, i) => i !== index);
    setTargetAudience(updated);
    handleSave(updated);
  };

  const handleDragStart = (index) => {
    setDraggedIndex(index);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };
  const handleDrop = (index) => {
    if (draggedIndex === null) return;
    const updated = [...targetAudience];
    const draggedItem = updated[draggedIndex];
    updated.splice(draggedIndex, 1);
    updated.splice(index, 0, draggedItem);
    setTargetAudience(updated);
    setDraggedIndex(null);
    handleSave(updated);
  };
  const handleAddNew = () => {
    if (newAudience.trim().length == 0) {
      alert("N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
      return;
    }
    if (newAudience.trim().length > 160) {
      alert("N·ªôi dung ph·∫£i c√≥ t·ªëi ƒëa 160 k√Ω t·ª±");
      return;
    }
    const updated = [...targetAudience, newAudience];
    setTargetAudience([...targetAudience, newAudience]);
    setNewAudience("");
    handleSave(updated);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return <div className="text-red-500 text-center mt-8">{error}</div>;
  }

  return (
    <div className="min-h-screen bg-white-100 p-6">
      <h1 className="text-2xl font-bold mb-4">Course Content</h1>
      <p className="text-black-500">
        C√°c m√¥ t·∫£ sau s·∫Ω hi·ªÉn th·ªã c√¥ng khai tr√™n Trang t·ªïng quan kh√≥a h·ªçc c·ªßa
        b·∫°n v√† s·∫Ω t√°c ƒë·ªông tr·ª±c ti·∫øp ƒë·∫øn th√†nh t√≠ch kh√≥a h·ªçc, ƒë·ªìng th·ªùi gi√∫p h·ªçc
        vi√™n quy·∫øt ƒë·ªãnh xem kh√≥a h·ªçc ƒë√≥ c√≥ ph√π h·ª£p v·ªõi h·ªç hay kh√¥ng.
      </p>
      <p className="font-bold mt-8 mb-2">
        N·ªôi dung kh√≥a h·ªçc c·ªßa b·∫°n bao g·ªìm nh·ªØng g√¨?
      </p>
      <div ref={audienceContainerRef} className="space-y-3">
        {targetAudience.map((audience, index) => (
          <div
            key={index}
            className={`flex items-center space-x-2 p-2 border border-gray-300 rounded bg-white transition-all duration-300 ${
              selectedAudience === index
                ? "shadow-2xl transform scale-105 border-blue-400"
                : ""
            }`}
            onClick={() => setSelectedAudience(index)}
            draggable
            onDragStart={() => handleDragStart(index)}
            onDragOver={(e) => handleDragOver(e)}
            onDrop={() => handleDrop(index)}
          >
            <input
              type="text"
              value={audience}
              onChange={(e) => handleAudienceChange(index, e.target.value)}
              className="flex-1 outline-none border-none text-gray-700"
              placeholder="Nh·∫≠p target audience (t·ªëi thi·ªÉu 160 k√Ω t·ª±)"
            />
            <span className="border border-purple-500 text-purple-500 rounded px-2 py-1 text-sm">
              {audience.length}
            </span>
            <button
              onClick={() => handleDelete(index)}
              className="border border-purple-500 text-purple-500 rounded px-2 py-1 hover:bg-purple-100 transition"
              title="X√≥a"
            >
              üóë
            </button>
            <button
              className="border border-purple-500 text-purple-500 rounded px-2 py-1 hover:bg-purple-100 transition cursor-move"
              title="K√©o ƒë·ªÉ thay ƒë·ªïi v·ªã tr√≠"
            >
              ‚ò∞
            </button>
          </div>
        ))}
      </div>
      <div className="mt-6">
        <h2 className="text-lg font-semibold">
          Th√™m th√¥ng tin n·ªôi dung m√† kh√≥a h·ªçc b·∫°n c√≥
        </h2>
        <p className="text-gray-500 text-sm italic mb-2">
          H√£y ƒë·∫£m b·∫£o th√¥ng tin b·∫°n th√™m s·∫Ω ƒë√∫ng v·ªõi n·ªëi dung c·ªßa kh√≥a h·ªçc
          c·ªßa b·∫°n.
        </p>
        <div className="flex items-center space-x-2 p-2 border border-gray-300 rounded bg-white">
          <input
            type="text"
            value={newAudience}
            onChange={(e) => setNewAudience(e.target.value)}
            className="flex-1 outline-none border-none text-gray-700"
            placeholder="Nh·∫≠p th√¥ng tin n·ªôi dung (t·ªëi ƒëa 160 k√Ω t·ª±)"
          />
          <span className="border border-purple-500 text-purple-500 rounded px-2 py-1 text-sm">
            {newAudience.length}
          </span>
        </div>
        <button
          onClick={handleAddNew}
          className="border border-purple-500 text-purple-500 rounded px-2 py-1 hover:bg-purple-100 transition mt-2"
        >
          + Th√™m m·ªõi n·ªôi dung
        </button>
      </div>
    </div>
  );
};

export default CourseContent;